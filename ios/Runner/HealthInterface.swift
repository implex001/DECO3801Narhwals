// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

/// Generated class from Pigeon that represents data sent in messages.
struct HealthDateRange {
  var fromDate: String? = nil
  var toDate: String? = nil

  static func fromMap(_ map: [String: Any?]) -> HealthDateRange? {
    let fromDate = map["fromDate"] as? String 
    let toDate = map["toDate"] as? String 

    return HealthDateRange(
      fromDate: fromDate,
      toDate: toDate
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "fromDate": fromDate,
      "toDate": toDate
    ]
  }
}

private class HealthApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return HealthDateRange.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class HealthApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? HealthDateRange {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class HealthApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HealthApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HealthApiCodecWriter(data: data)
  }
}

class HealthApiCodec: FlutterStandardMessageCodec {
  static let shared = HealthApiCodec(readerWriter: HealthApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HealthApi {
  func getSteps(dateRange: HealthDateRange, completion: @escaping (Int32) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HealthApiSetup {
  /// The codec used by HealthApi.
  static var codec: FlutterStandardMessageCodec { HealthApiCodec.shared }
  /// Sets up an instance of `HealthApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HealthApi?) {
    let getStepsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.HealthApi.getSteps", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getStepsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dateRangeArg = args[0] as! HealthDateRange
        api.getSteps(dateRange: dateRangeArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      getStepsChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
