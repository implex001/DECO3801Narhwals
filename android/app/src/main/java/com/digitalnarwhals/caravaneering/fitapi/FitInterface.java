// Autogenerated from Pigeon (v3.2.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.digitalnarwhals.caravaneering.fitapi;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class FitInterface {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FitDateRange {
    private @Nullable String fromDate;
    public @Nullable String getFromDate() { return fromDate; }
    public void setFromDate(@Nullable String setterArg) {
      this.fromDate = setterArg;
    }

    private @Nullable String toDate;
    public @Nullable String getToDate() { return toDate; }
    public void setToDate(@Nullable String setterArg) {
      this.toDate = setterArg;
    }

    public static final class Builder {
      private @Nullable String fromDate;
      public @NonNull Builder setFromDate(@Nullable String setterArg) {
        this.fromDate = setterArg;
        return this;
      }
      private @Nullable String toDate;
      public @NonNull Builder setToDate(@Nullable String setterArg) {
        this.toDate = setterArg;
        return this;
      }
      public @NonNull FitDateRange build() {
        FitDateRange pigeonReturn = new FitDateRange();
        pigeonReturn.setFromDate(fromDate);
        pigeonReturn.setToDate(toDate);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("fromDate", fromDate);
      toMapResult.put("toDate", toDate);
      return toMapResult;
    }
    static @NonNull FitDateRange fromMap(@NonNull Map<String, Object> map) {
      FitDateRange pigeonResult = new FitDateRange();
      Object fromDate = map.get("fromDate");
      pigeonResult.setFromDate((String)fromDate);
      Object toDate = map.get("toDate");
      pigeonResult.setToDate((String)toDate);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class FitApiCodec extends StandardMessageCodec {
    public static final FitApiCodec INSTANCE = new FitApiCodec();
    private FitApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return FitDateRange.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof FitDateRange) {
        stream.write(128);
        writeValue(stream, ((FitDateRange) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FitApi {
    void getSteps(@NonNull FitDateRange dateRange, Result<Long> result);

    /** The codec used by FitApi. */
    static MessageCodec<Object> getCodec() {
      return FitApiCodec.INSTANCE;
    }

    /** Sets up an instance of `FitApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, FitApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FitApi.getSteps", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              FitDateRange dateRangeArg = (FitDateRange)args.get(0);
              if (dateRangeArg == null) {
                throw new NullPointerException("dateRangeArg unexpectedly null.");
              }
              Result<Long> resultCallback = new Result<Long>() {
                public void success(Long result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getSteps(dateRangeArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
